from __future__ import print_function

import logging
import json
import urllib2
import base64

import boto3

logger = logging.getLogger()
logger.setLevel(logging.DEBUG)

API_BASE = {{ scoring.url }}
API_TOKEN = {{ scoring.api_token }}

DYNAMODB = boto3.resource('dynamodb')
ACTIVE_TABLE = DYNAMODB.Table('activeMessages')
COMPLETE_TABLE = DYNAMODB.Table('completeMessages')

def handle(event, context):
    """
    Lambda handler
    """
    logger.info("Event: {}".format(event))

    for record in event['Records']:
        # Kinesis data is base64 encoded so decode here
        payload = base64.b64decode(record['kinesis']['data'])

        # parse json
        message = json.loads(payload)

        # put the part received into dynamo
        process_message(message)

    return 'OK'

def process_message(msg):
    """
    processes the messages by combining and appending the kind code
    """

    try:
        result = COMPLETE_TABLE.get_item(Key={
            'Id':msg['Id']
            })
        if 'Item' in result:
            print 'Message {} exists in completed'.format(msg['Id'])
            return 'OK'
    except:
        COMPLETE_TABLE = DYNAMODB.create_table(
            TableName='completeMessages',
            KeySchema=[
                {
                    'AttributeName': 'Id',
                    'KeyType': 'HASH'
                }
            ],
            AttributeDefinitions=[
                {
                    'AttributeName': 'Id',
                    'AttributeType': 'S'
                },
                {
                    'AttributeName': 'Data',
                    'AttributeType': 'S'
                },
            ],
            ProvisionedThroughput={
                'ReadCapacityUnits': 5,
                'WriteCapacityUnits': 5
            }
        )


    # Try to get the parts of the message from the MESSAGES dictionary.
    # If it's not there, create one that has None in both parts
    try:
        result = ACTIVE_TABLE.get_item(Key={
            'Id':msg['Id'],
            'PartNumber':msg['PartNumber']
            })
        if 'Item' not in result:
            print 'Message {} does not exist in active'.format(msg['Id'])
            ACTIVE_TABLE.put_item(Item=msg)
    except:
        ACTIVE_TABLE = DYNAMODB.create_table(
            TableName='activeMessages',
            KeySchema=[
                {
                    'AttributeName': 'Id',
                    'KeyType': 'HASH'
                },
                {
                    'AttributeName': 'PartNumber',
                    'KeyType': 'RANGE'
                },
            ],
            AttributeDefinitions=[
                {
                    'AttributeName': 'Id',
                    'AttributeType': 'S'
                },
                {
                    'AttributeName': 'PartNumber',
                    'AttributeType': 'N'
                },
                {
                    'AttributeName': 'TotalParts',
                    'AttributeType': 'N'
                },
                {
                    'AttributeName': 'Data',
                    'AttributeType': 's'
                }
            ],
            ProvisionedThroughput={
                'ReadCapacityUnits': 5,
                'WriteCapacityUnits': 5
            }
        )
        ACTIVE_TABLE.put_item(Item=msg)

    results = ACTIVE_TABLE.query(KeyConditionExpression=Key('Id').eq(msg['Id']))
    if results:
        all_parts = sorted(results['Items'], key=lambda t: t['PartNumber'])
        if len(all_parts) == all_parts[0]['TotalParts']:
            send_message(msg['Id'], all_parts)

    return 'OK'

def send_message(msg_id, all_parts):

    result = ''
    for part in all_parts:
        result = "{}{}".format(result, part['Data'])
        ACTIVE_TABLE.delete_item(
            Key={
                'Id': part['Id'],
                'PartNumber': part['PartNumber']
            })

    # app.logger.debug("got a complete message for %s" % msg_id)
    print "all parts found"

    # sending the response to the score calculator
    # format:
    #   url -> api_base/jFgwN4GvTB1D2QiQsQ8GHwQUbbIJBS6r7ko9RVthXCJqAiobMsLRmsuwZRQTlOEW
    #   headers -> x-gameday-token = API_token
    #   data -> EaXA2G8cVTj1LGuRgv8ZhaGMLpJN2IKBwC5eYzAPNlJwkN4Qu1DIaI3H1zyUdf1H5NITR
    APP.logger.debug("ID: %s" % msg_id)
    APP.logger.debug("RESULT: %s" % result)
    url = API_BASE + '/' + msg_id
    print url
    print result
    req = urllib2.Request(url, data=result, headers={'x-gameday-token':ARGS.API_token})
    resp = urllib2.urlopen(req)
    print resp
    resp.close()

    COMPLETE_TABLE.put_item(Item={
        'Id': msg_id,
        'Data': result
        })

    return 'OK'

if __name__ == "__main__":

    # By default, we disable threading for "debugging" purposes.
    # This will cause the app to block requests, which means that you miss out on some points,
    # and fail ALB healthchecks, but whatever I know I'm getting fired on Friday.
    # APP.run(host="0.0.0.0", port="80")

    print ""
    # Use this to enable threading:
    APP.run(host="0.0.0.0", port="80", threaded=True)
